/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_escape_right {
            bindings = <&kp ESCAPE>;
            key-positions = <30 31>;
            timeout-ms = <50>;
        };

        combo_backspace_right {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32>;
            timeout-ms = <50>;
        };

        combo_backspace_left {
            bindings = <&kp BACKSPACE>;
            key-positions = <28 27>;
            timeout-ms = <50>;
        };

        combo_escape_left {
            bindings = <&kp ESCAPE>;
            key-positions = <28 29>;
            timeout-ms = <50>;
        };

        combo_delete_right {
            bindings = <&kp DELETE>;
            key-positions = <34 33>;
            timeout-ms = <50>;
        };

        combo_delete_left {
            bindings = <&kp DELETE>;
            key-positions = <25 26>;
            timeout-ms = <50>;
        };

        combo_numlock_left {
            bindings = <&kp KP_NUMLOCK>;
            key-positions = <4 5>;
        };

        combo_capslock_left {
            bindings = <&kp CAPSLOCK>;
            key-positions = <16 17>;
        };
    };

    behaviors {
        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <53 54 42 43 52 51 50 55 56 57 24 12 36 49>;
        };

        layernav_dance: layernav_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYERNAV_DANCE";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 1>, <&to 2>;

            tapping-term-ms = <280>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            label = "qwerty";
            bindings = <
&hold_tap F1 NUMBER_1  &hold_tap F2 NUMBER_2  &hold_tap F3 NUMBER_3  &hold_tap F4 NUMBER_4  &hold_tap F5 N5    &hold_tap F6 NUMBER_6                                                  &hold_tap F7 N7  &hold_tap F8 N8    &hold_tap F9 N9  &hold_tap F10 N0  &hold_tap MINUS EQUAL  &hold_tap LC(BACKSPACE) BACKSPACE
&hold_tap LS(TAB) TAB  &hold_tap LC(Q) Q      &kp W                  &kp E                  &kp R              &hold_tap LC(T) T                                                      &kp Y            &kp U              &kp I            &hold_tap F11 O   &hold_tap F12 P        &kp BSLH
&kp LEFT_CONTROL       &hold_tap LC(A) A      &kp S                  &kp D                  &kp F              &kp G                                                                  &kp H            &kp J              &kp K            &kp L             &kp SEMI               &kp SQT
&kp LEFT_SHIFT         &hold_tap LC(Z) Z      &hold_tap LC(X) X      &hold_tap LC(C) C      &hold_tap LC(V) V  &kp B                  &layernav_dance          &layernav_dance        &kp N            &kp M              &kp COMMA        &kp DOT           &kp FSLH               &kp RSHFT
                                                                     &kp LALT               &kp LEFT_GUI       &mo 3                  &hold_tap ENTER SPACE    &hold_tap SPACE ENTER  &mo 3            &kp RIGHT_CONTROL  &kp MINUS
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Nums {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            label = "Num";
            bindings = <
&kp GRAVE  &trans           &kp LEFT_BRACKET  &kp SLASH        &kp ASTERISK     &kp MINUS                                       &kp GRAVE        &kp RIGHT_BRACKET  &kp SLASH        &kp ASTERISK     &kp MINUS  &trans
&trans     &trans           &kp KP_NUMBER_7   &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                        &kp TAB          &kp KP_NUMBER_7    &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS   &trans
&trans     &kp SEMICOLON    &kp KP_NUMBER_4   &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PIPE                                        &kp SEMICOLON    &kp KP_NUMBER_4    &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PIPE   &trans
&trans     &kp KP_NUMBER_0  &kp KP_NUMBER_1   &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp ENTER   &layernav_dance    &layernav_dance  &kp SPACE        &kp KP_N1          &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp ENTER  &trans
                                              &kp KP_NUMBER_0  &kp COMMA        &kp PERIOD  &trans             &trans           &kp KP_NUMBER_0  &kp COMMA          &kp PERIOD
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Arrows {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            label = "Arrows";
            bindings = <
&trans  &trans          &trans                   &kp INSERT                       &kp HOME                   &kp PAGE_UP                                        &kp HOME        &kp PG_UP                &kp INSERT                           &trans                           &trans  &trans
&trans  &trans          &trans                   &hold_tap LC(UP_ARROW) UP_ARROW  &kp END                    &kp PAGE_DOWN                                      &kp END         &kp PAGE_DOWN            &hold_tap LC(UP_ARROW) UP_ARROW      &trans                           &trans  &trans
&trans  &kp LEFT_SHIFT  &hold_tap LC(LEFT) LEFT  &hold_tap LC(DOWN) DOWN          &hold_tap LC(RIGHT) RIGHT  &trans                                             &kp LEFT_SHIFT  &hold_tap LC(LEFT) LEFT  &hold_tap LC(DOWN_ARROW) DOWN_ARROW  &hold_tap LC(RIGHT_ARROW) RIGHT  &trans  &trans
&trans  &trans          &trans                   &trans                           &trans                     &trans         &layernav_dance    &layernav_dance  &trans          &trans                   &trans                               &trans                           &trans  &trans
                                                 &trans                           &trans                     &kp ENTER      &trans             &trans           &kp SPACE       &trans                   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Swap {
            bindings = <
&kp LBKT  &kp RBKT  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL  &trans                            &kp LBKT  &kp RBKT  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp N5  &kp N6
&trans    &kp Y     &kp U                 &kp I                  &kp O      &kp P                             &kp Q     &kp W     &kp E                 &kp R                  &kp T   &trans
&trans    &kp H     &kp J                 &kp K                  &kp L      &kp SEMI                          &kp A     &kp S     &kp D                 &kp F                  &kp G   &trans
&trans    &kp N     &kp M                 &kp COMMA              &kp DOT    &kp FSLH  &trans       &trans     &kp Z     &kp X     &kp C                 &kp V                  &kp B   &trans
                                          &trans                 &trans     &trans    &kp ENTER    &kp SPACE  &trans    &trans    &trans
            >;

            label = "Swap";
        };
    };
};
